{
	"name": "MultipleComponentDataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "EmpSource",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "EmpSource",
						"type": "DatasetReference"
					},
					"name": "Empsource"
				},
				{
					"dataset": {
						"referenceName": "DepSource",
						"type": "DatasetReference"
					},
					"name": "Depsource"
				},
				{
					"dataset": {
						"referenceName": "EmpSource",
						"type": "DatasetReference"
					},
					"name": "Empsource2"
				},
				{
					"dataset": {
						"referenceName": "DepSource",
						"type": "DatasetReference"
					},
					"name": "Depsource2"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "Payrollsource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "EMPDEPSink",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "Output",
						"type": "DatasetReference"
					},
					"name": "DepExistEmp",
					"rejectedDataLinkedService": {
						"referenceName": "AzureBlobStorage1",
						"type": "LinkedServiceReference"
					}
				},
				{
					"dataset": {
						"referenceName": "DelimitedText2",
						"type": "DatasetReference"
					},
					"name": "UnionEMPDEPPayrollsink"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "doesnotexists"
				},
				{
					"name": "union1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          empid as string,",
				"          empname as string,",
				"          country as string,",
				"          depname as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          empid as string,",
				"          empname as string,",
				"          country as string,",
				"          depname as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Empsource",
				"source(output(",
				"          depid as string,",
				"          depname as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Depsource",
				"source(output(",
				"          empid as string,",
				"          empname as string,",
				"          country as string,",
				"          depname as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Empsource2",
				"source(output(",
				"          depid as string,",
				"          depname as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Depsource2",
				"source(output(",
				"          empid as string,",
				"          empname as string,",
				"          country as string,",
				"          depname as string,",
				"          salary as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Payrollsource",
				"source1 derive(country = upper(country)) ~> derivedColumn1",
				"Empsource, Depsource exists(Empsource@depname == Depsource@depname,",
				"     negate:false,",
				"     broadcast: 'auto')~> doesnotexists",
				"Empsource2, Depsource2, Payrollsource union(byName: true)~> union1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['DerivedColumn.txt'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1",
				"doesnotexists sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          empid as string,",
				"          empname as string,",
				"          country as string,",
				"          depname as string",
				"     ),",
				"     partitionFileNames:['DepExistEmp.txt'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> DepExistEmp",
				"union1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> UnionEMPDEPPayrollsink"
			]
		}
	}
}