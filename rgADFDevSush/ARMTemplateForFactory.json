{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "rgADFDevSush"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureSqlDatabase1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'AzureSqlDatabase1'"
		},
		"AzureSqlDatabase1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sqlserversush.database.windows.net"
		},
		"AzureSqlDatabase1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "sqldatabasesush"
		},
		"AzureSqlDatabase1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "CloudSQLServer2025"
		},
		"ParamLinkedService_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "@{linkedService().serverName}"
		},
		"ParamLinkedService_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "@{linkedService().dbName}"
		},
		"ParamLinkedService_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "@{linkedService().userName}"
		},
		"EventtriggerSourceBlobSinkBlob_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/74978c73-22ed-4fd5-9de2-85878197ac55/resourceGroups/rg_ADF_Sush/providers/Microsoft.Storage/storageAccounts/storageaccountadfsush"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/CopyFromBlobToSqlPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_u7u",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "source//inputEmp.txt"
							},
							{
								"name": "Destination",
								"value": "dbo.emp"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "LastName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LastName",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_u7u",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_u7u",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-01-29T19:53:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_u7u')]",
				"[concat(variables('factoryId'), '/datasets/DestinationDataset_u7u')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyFromSourceBlobSinkBlobPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data b2b",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_u7u",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationBlob",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-01-30T06:28:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_u7u')]",
				"[concat(variables('factoryId'), '/datasets/DestinationBlob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EMPDEPDataflowPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "EMPDEPdataflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MappingDataFlowEMPDEP",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EmpSource": {},
									"DepSource": {},
									"EMPDEPSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-03T08:19:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/MappingDataFlowEMPDEP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EvenTriggerParamSourceBlobSinkBlob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data b2b",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "LastName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LastName",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceBlobTriggerDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationBlob",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-01-30T11:06:45Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceBlobTriggerDataset')]",
				"[concat(variables('factoryId'), '/datasets/DestinationBlob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GetMetaDataIfConditionActivity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SourceBlobTriggerDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"columnCount",
								"exists",
								"itemName",
								"itemType",
								"lastModified",
								"size",
								"structure"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Get Metadata').output.exists",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "False - File does not Exists",
									"description": "False - File does not Exists",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": {
											"value": "@pipeline().parameters.waitfor10sec",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "True- FileExists",
									"description": "True- FileExists",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": {
											"value": "@pipeline().parameters.waitfor10sec",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"waitfor10sec": {
						"type": "int",
						"defaultValue": 10
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-01-31T19:54:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceBlobTriggerDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LookupSortPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupSortData flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Lookupdataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Empsource": {},
									"Depsource": {},
									"LookupSort": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-04T08:24:55Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Lookupdataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MultipleComponentPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MultipleComponentDataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"Empsource": {},
									"Depsource": {},
									"Empsource2": {},
									"Depsource2": {},
									"Payrollsource": {},
									"sink1": {},
									"DepExistEmp": {},
									"UnionEMPDEPPayrollsink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-04T07:16:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/MultipleComponentDataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParamPipelineCopyFromSSQLtoDSQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy datasql2sql",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ParamDataset",
								"type": "DatasetReference",
								"parameters": {
									"tableName": {
										"value": "@pipeline().parameters.sourcetableNamefromPipeline",
										"type": "Expression"
									},
									"serverNamefromDataset": {
										"value": "@pipeline().parameters.serverNamefromPipeline",
										"type": "Expression"
									},
									"dbNamefromDataset": {
										"value": "@pipeline().parameters.dbNamefromPipeline",
										"type": "Expression"
									},
									"userNamefromDataset": {
										"value": "@pipeline().parameters.userNamefromPipeline",
										"type": "Expression"
									},
									"passwordfromDataset": {
										"value": "@pipeline().parameters.passwordfromPipeline",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ParamDataset",
								"type": "DatasetReference",
								"parameters": {
									"tableName": {
										"value": "@pipeline().parameters.sinktableNamefromPipeline",
										"type": "Expression"
									},
									"serverNamefromDataset": {
										"value": "@pipeline().parameters.serverNamefromPipeline",
										"type": "Expression"
									},
									"dbNamefromDataset": {
										"value": "@pipeline().parameters.dbNamefromPipeline",
										"type": "Expression"
									},
									"userNamefromDataset": {
										"value": "@pipeline().parameters.userNamefromPipeline",
										"type": "Expression"
									},
									"passwordfromDataset": {
										"value": "@pipeline().parameters.passwordfromPipeline",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"sourcetableNamefromPipeline": {
						"type": "string",
						"defaultValue": "emp"
					},
					"serverNamefromPipeline": {
						"type": "string",
						"defaultValue": "sqlserversush.database.windows.net"
					},
					"dbNamefromPipeline": {
						"type": "string",
						"defaultValue": "sqldatabasesush"
					},
					"userNamefromPipeline": {
						"type": "string",
						"defaultValue": "CloudSQLServer2025"
					},
					"passwordfromPipeline": {
						"type": "string",
						"defaultValue": "CloudSQLServer23042025"
					},
					"sinktableNamefromPipeline": {
						"type": "string",
						"defaultValue": "sinkemp"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-01-31T11:28:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ParamDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParamPipelineMaintainDetailsStoredProcedure')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy datasql2sql",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ParamDataset",
								"type": "DatasetReference",
								"parameters": {
									"tableName": {
										"value": "@pipeline().parameters.sourcetableNamefromPipeline",
										"type": "Expression"
									},
									"serverNamefromDataset": {
										"value": "@pipeline().parameters.serverNamefromPipeline",
										"type": "Expression"
									},
									"dbNamefromDataset": {
										"value": "@pipeline().parameters.dbNamefromPipeline",
										"type": "Expression"
									},
									"userNamefromDataset": {
										"value": "@pipeline().parameters.userNamefromPipeline",
										"type": "Expression"
									},
									"passwordfromDataset": {
										"value": "@pipeline().parameters.passwordfromPipeline",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ParamDataset",
								"type": "DatasetReference",
								"parameters": {
									"tableName": {
										"value": "@pipeline().parameters.sinktableNamefromPipeline",
										"type": "Expression"
									},
									"serverNamefromDataset": {
										"value": "@pipeline().parameters.serverNamefromPipeline",
										"type": "Expression"
									},
									"dbNamefromDataset": {
										"value": "@pipeline().parameters.dbNamefromPipeline",
										"type": "Expression"
									},
									"userNamefromDataset": {
										"value": "@pipeline().parameters.userNamefromPipeline",
										"type": "Expression"
									},
									"passwordfromDataset": {
										"value": "@pipeline().parameters.passwordfromPipeline",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "spPipelineExecutionDetails",
						"description": "Maintain Pipeline Execution details in Table through Stored Procedure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy datasql2sql",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@pipeline().parameters.spNamefromPipeline",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"EndTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"StartTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ParamLinkedService",
							"type": "LinkedServiceReference",
							"parameters": {
								"serverName": {
									"value": "@pipeline().parameters.serverNamefromPipeline",
									"type": "Expression"
								},
								"dbName": {
									"value": "@pipeline().parameters.dbNamefromPipeline",
									"type": "Expression"
								},
								"userName": {
									"value": "@pipeline().parameters.userNamefromPipeline",
									"type": "Expression"
								},
								"password": {
									"value": "@pipeline().parameters.passwordfromPipeline",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"sourcetableNamefromPipeline": {
						"type": "string",
						"defaultValue": "emp"
					},
					"serverNamefromPipeline": {
						"type": "string",
						"defaultValue": "sqlserversush.database.windows.net"
					},
					"dbNamefromPipeline": {
						"type": "string",
						"defaultValue": "sqldatabasesush"
					},
					"userNamefromPipeline": {
						"type": "string",
						"defaultValue": "CloudSQLServer2025"
					},
					"passwordfromPipeline": {
						"type": "string",
						"defaultValue": "CloudSQLServer23042025"
					},
					"sinktableNamefromPipeline": {
						"type": "string",
						"defaultValue": "sinkemp"
					},
					"spNamefromPipeline": {
						"type": "string",
						"defaultValue": "spPipelineExecutionDetails"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-01-31T12:30:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ParamDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/ParamLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PowerQueryPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Power Query1",
						"type": "ExecuteWranglingDataflow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "powerquery1",
								"type": "DataFlowReference",
								"datasetParameters": {
									"EmpSource": {},
									"UserQueryDestionationOutputSinkBlob": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"queries": [
								{
									"queryName": "UserQuery",
									"dataflowSinks": [
										{
											"name": "UserQueryDestionationOutputSinkBlob",
											"dataset": {
												"referenceName": "DestionationOutputSinkBlob",
												"type": "DatasetReference",
												"parameters": {}
											},
											"script": "sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> UserQueryDestionationOutputSinkBlob"
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [
					"Power Query"
				],
				"lastPublishTime": "2025-02-05T12:34:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/powerquery1')]",
				"[concat(variables('factoryId'), '/datasets/DestionationOutputSinkBlob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SwitchActivityPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Switch1",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@activity('Get Metadata1').output",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "File1",
									"activities": [
										{
											"name": "Copy data1",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BinarySource",
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": true
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												},
												"sink": {
													"type": "BinarySink",
													"storeSettings": {
														"type": "AzureBlobStorageWriteSettings"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "SourceBlobFile1",
													"type": "DatasetReference",
													"parameters": {
														"FileName1": {
															"value": "@pipeline().parameters.FileName1",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "DestinationBlobFile1",
													"type": "DatasetReference",
													"parameters": {}
												}
											]
										}
									]
								},
								{
									"value": "File2",
									"activities": [
										{
											"name": "Copy data2",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BinarySource",
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": true
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												},
												"sink": {
													"type": "BinarySink",
													"storeSettings": {
														"type": "AzureBlobStorageWriteSettings"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "SourceBlobFile1",
													"type": "DatasetReference",
													"parameters": {
														"FileName1": "File2.txt"
													}
												}
											],
											"outputs": [
												{
													"referenceName": "DestinationBlobFile2",
													"type": "DatasetReference",
													"parameters": {}
												}
											]
										}
									]
								}
							]
						}
					},
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SourceBlobFile1",
								"type": "DatasetReference",
								"parameters": {
									"FileName1": "File1.txt"
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"FileName1": {
						"type": "string",
						"defaultValue": "File1.txt"
					},
					"FileName2": {
						"type": "string",
						"defaultValue": "File2.txt"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-02T19:30:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceBlobFile1')]",
				"[concat(variables('factoryId'), '/datasets/DestinationBlobFile1')]",
				"[concat(variables('factoryId'), '/datasets/DestinationBlobFile2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ValidationPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Validation1",
						"type": "Validation",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SourceDataset_u7u",
								"type": "DatasetReference",
								"parameters": {}
							},
							"sleep": 10
						}
					},
					{
						"name": "Variable_True",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Validation1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "SetVariable",
								"value": "True"
							}
						],
						"typeProperties": {
							"variableName": "v_FileExists",
							"value": "True"
						}
					},
					{
						"name": "Wait10Sec",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Validation1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [
							{
								"name": "WaitActivity",
								"value": "10sec"
							}
						],
						"typeProperties": {
							"waitTimeInSeconds": 20
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"v_FileExists": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-02T17:46:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_u7u')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WebActivityPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetWeb-GetallEmployeeDetails",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:01:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"disableCertValidation": false,
							"turnOffAsync": false,
							"url": {
								"value": "@pipeline().parameters.GETWebUrl",
								"type": "Expression"
							}
						}
					},
					{
						"name": "PostWeb-CreateNewEmployeeDetails",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "GetWeb-GetallEmployeeDetails",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:01:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-type": "application\\json"
							},
							"disableCertValidation": false,
							"turnOffAsync": false,
							"url": {
								"value": "@pipeline().parameters.POSTWebUrl",
								"type": "Expression"
							},
							"body": {
								"id": 25,
								"employee_name": "Susmita PPP",
								"employee_salary": 320800,
								"employee_age": 40,
								"profile_image": ""
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"GETWebUrl": {
						"type": "string",
						"defaultValue": "http://dummy.restapiexample.com/api/v1/employees"
					},
					"POSTWebUrl": {
						"type": "string",
						"defaultValue": "http://dummy.restapiexample.com/api/v1/create"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-02T18:32:52Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "PayrollEmployee.txt",
						"container": "source"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empid",
						"type": "String"
					},
					{
						"name": "empname",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "depname",
						"type": "String"
					},
					{
						"name": "salary",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "UnionEMPDEPPay.txt",
						"container": "sinkoutput"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DepSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Department.txt",
						"container": "source"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "depid",
						"type": "String"
					},
					{
						"name": "depname",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationBlob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "EventTriggerOutputEmp2.txt",
						"container": "sinkoutput"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationBlobFile1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "File1.txt",
						"container": "output1"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationBlobFile2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "File2.txt",
						"container": "output2"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_u7u')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "FirstName",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "LastName",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "emp"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestionationOutputSinkBlob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "source"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EMPDEPSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "EMPDEPSink.txt",
						"container": "sinkoutput"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmpSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Employee.txt",
						"container": "source"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empid",
						"type": "String"
					},
					{
						"name": "empname",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "depname",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/JsonDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [
					"Json"
				],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Sample.json",
						"container": "source"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"name": {
							"type": "string"
						},
						"age": {
							"type": "integer"
						},
						"city": {
							"type": "string"
						},
						"married": {
							"type": "boolean"
						},
						"hobbies": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"address": {
							"type": "object",
							"properties": {
								"street": {
									"type": "string"
								},
								"city": {
									"type": "string"
								},
								"postal_code": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "DepNotExistEmp.txt",
						"container": "sinkoutput"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empid",
						"type": "String"
					},
					{
						"name": "empname",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "depname",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParamDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ParamLinkedService",
					"type": "LinkedServiceReference",
					"parameters": {
						"serverName": {
							"value": "@dataset().serverNamefromDataset",
							"type": "Expression"
						},
						"dbName": {
							"value": "@dataset().dbNamefromDataset",
							"type": "Expression"
						},
						"userName": {
							"value": "@dataset().userNamefromDataset",
							"type": "Expression"
						},
						"password": {
							"value": "@dataset().passwordfromDataset",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"tableName": {
						"type": "string"
					},
					"serverNamefromDataset": {
						"type": "string"
					},
					"dbNamefromDataset": {
						"type": "string"
					},
					"userNamefromDataset": {
						"type": "string"
					},
					"passwordfromDataset": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().tableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ParamLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceBlobFile1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName1": {
						"type": "string",
						"defaultValue": "File1.txt"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName1",
							"type": "Expression"
						},
						"container": "source"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceBlobFile2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName2": {
						"type": "string",
						"defaultValue": "File2.txt"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName2",
							"type": "Expression"
						},
						"container": "source"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceBlobTriggerDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "EventTriggerEmp2.txt",
						"container": "source"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "FirstName",
						"type": "String"
					},
					{
						"name": "LastName",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_u7u')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "inputEmp.txt",
						"container": "source"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "FirstName",
						"type": "String"
					},
					{
						"name": "LastName",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceInputBlob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "EmployeeSalary.txt",
						"container": "source"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "source file - inputEmp.txt",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Sink sql table - dbo.emp",
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('AzureSqlDatabase1_properties_typeProperties_server')]",
					"database": "[parameters('AzureSqlDatabase1_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('AzureSqlDatabase1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('AzureSqlDatabase1_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParamLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"serverName": {
						"type": "string"
					},
					"dbName": {
						"type": "string"
					},
					"userName": {
						"type": "string"
					},
					"password": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('ParamLinkedService_properties_typeProperties_server')]",
					"database": "[parameters('ParamLinkedService_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('ParamLinkedService_properties_typeProperties_userName')]",
					"password": "@{linkedService().password}"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/EventtriggerSourceBlobSinkBlob')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "After file placing - Event trigger Source Blob Sink Blob",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "EvenTriggerParamSourceBlobSinkBlob",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/source/blobs/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('EventtriggerSourceBlobSinkBlob_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/EvenTriggerParamSourceBlobSinkBlob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Schedule trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Schedule trigger - CopyFromBlobToSqlPipeline",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "CopyFromBlobToSqlPipeline",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 15,
						"startTime": "2025-01-30T15:25:00",
						"endTime": "2025-01-31T15:30:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CopyFromBlobToSqlPipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Tumbling Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "CopyFromSourceBlobSinkBlobPipeline",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 15,
					"startTime": "2025-01-30T10:25:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CopyFromSourceBlobSinkBlobPipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TumblingWindowTrigger4Feb')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "CopyFromSourceBlobSinkBlobPipeline",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Hour",
					"interval": 1,
					"startTime": "2025-02-04T08:13:00Z",
					"endTime": "2025-02-05T20:13:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CopyFromSourceBlobSinkBlobPipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime1')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"description": "Self-Hosted integrationRuntime1",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Lookupdataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmpSource",
								"type": "DatasetReference"
							},
							"name": "Empsource"
						},
						{
							"dataset": {
								"referenceName": "DepSource",
								"type": "DatasetReference"
							},
							"name": "Depsource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DestionationOutputSinkBlob",
								"type": "DatasetReference"
							},
							"name": "LookupSort"
						}
					],
					"transformations": [
						{
							"name": "lookup1"
						},
						{
							"name": "sort1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          empname as string,",
						"          country as string,",
						"          depname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Empsource",
						"source(output(",
						"          depid as string,",
						"          depname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Depsource",
						"Empsource, Depsource lookup(Empsource@depname == Depsource@depname,",
						"     multiple: true,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 sort(asc(empname, false)) ~> sort1",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['LookupSort.txt'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> LookupSort"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EmpSource')]",
				"[concat(variables('factoryId'), '/datasets/DepSource')]",
				"[concat(variables('factoryId'), '/datasets/DestionationOutputSinkBlob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MappingDataFlowEMPDEP')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmpSource",
								"type": "DatasetReference"
							},
							"name": "EmpSource"
						},
						{
							"dataset": {
								"referenceName": "DepSource",
								"type": "DatasetReference"
							},
							"name": "DepSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EMPDEPSink",
								"type": "DatasetReference"
							},
							"name": "EMPDEPSink",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage1",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "ConditionalSplitcountrywise"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          empname as string,",
						"          country as string,",
						"          depname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmpSource",
						"source(output(",
						"          depid as string,",
						"          depname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DepSource",
						"ConditionalSplitcountrywise@India, DepSource join(ConditionalSplitcountrywise@India@depname == DepSource@depname,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 filter(country=='Dubai') ~> filter1",
						"DepSource aggregate(TotalEmployeeDepartmentWise = count(depname)) ~> aggregate1",
						"EmpSource split(equals(country,\"India\"),",
						"     equals(country,\"USA\"),",
						"     equals(country,\"Dubai\"),",
						"     disjoint: false) ~> ConditionalSplitcountrywise@(India, USA, Dubai, Other)",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          empid,",
						"          empname,",
						"          country,",
						"          depname = DepSource@depname",
						"     )) ~> EMPDEPSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EmpSource')]",
				"[concat(variables('factoryId'), '/datasets/DepSource')]",
				"[concat(variables('factoryId'), '/datasets/EMPDEPSink')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MultipleComponentDataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmpSource",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "EmpSource",
								"type": "DatasetReference"
							},
							"name": "Empsource"
						},
						{
							"dataset": {
								"referenceName": "DepSource",
								"type": "DatasetReference"
							},
							"name": "Depsource"
						},
						{
							"dataset": {
								"referenceName": "EmpSource",
								"type": "DatasetReference"
							},
							"name": "Empsource2"
						},
						{
							"dataset": {
								"referenceName": "DepSource",
								"type": "DatasetReference"
							},
							"name": "Depsource2"
						},
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "Payrollsource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EMPDEPSink",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "Output",
								"type": "DatasetReference"
							},
							"name": "DepExistEmp",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage1",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "DelimitedText2",
								"type": "DatasetReference"
							},
							"name": "UnionEMPDEPPayrollsink"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "doesnotexists"
						},
						{
							"name": "union1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          empname as string,",
						"          country as string,",
						"          depname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          empid as string,",
						"          empname as string,",
						"          country as string,",
						"          depname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Empsource",
						"source(output(",
						"          depid as string,",
						"          depname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Depsource",
						"source(output(",
						"          empid as string,",
						"          empname as string,",
						"          country as string,",
						"          depname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Empsource2",
						"source(output(",
						"          depid as string,",
						"          depname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Depsource2",
						"source(output(",
						"          empid as string,",
						"          empname as string,",
						"          country as string,",
						"          depname as string,",
						"          salary as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Payrollsource",
						"source1 derive(country = upper(country)) ~> derivedColumn1",
						"Empsource, Depsource exists(Empsource@depname == Depsource@depname,",
						"     negate:false,",
						"     broadcast: 'auto')~> doesnotexists",
						"Empsource2, Depsource2, Payrollsource union(byName: true)~> union1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['DerivedColumn.txt'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"doesnotexists sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          empid as string,",
						"          empname as string,",
						"          country as string,",
						"          depname as string",
						"     ),",
						"     partitionFileNames:['DepExistEmp.txt'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> DepExistEmp",
						"union1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> UnionEMPDEPPayrollsink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EmpSource')]",
				"[concat(variables('factoryId'), '/datasets/DepSource')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/EMPDEPSink')]",
				"[concat(variables('factoryId'), '/datasets/Output')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Rankingdataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SourceInputBlob",
								"type": "DatasetReference"
							},
							"name": "EmpSalary"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DestionationOutputSinkBlob",
								"type": "DatasetReference"
							},
							"name": "denseranksink"
						},
						{
							"dataset": {
								"referenceName": "DestionationOutputSinkBlob",
								"type": "DatasetReference"
							},
							"name": "ranksink"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmpSalary",
						"EmpSalary sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['DenseRankSink.txt'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> denseranksink",
						"EmpSalary sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['RankSink.txt'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ranksink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceInputBlob')]",
				"[concat(variables('factoryId'), '/datasets/DestionationOutputSinkBlob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/powerquery1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "EmpSource",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> EmpSource",
							"dataset": {
								"referenceName": "EmpSource",
								"type": "DatasetReference"
							}
						}
					],
					"script": "section Section1;\r\nshared EmpSource = let AdfDoc = AzureStorage.BlobContents(\"https://storageaccountadfsush.blob.core.windows.net/source/Employee.txt\"),Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]), PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true]) in  PromotedHeaders;\r\nshared UserQuery = let Source = #\"EmpSource\",\r\n  #\"Uppercased text\" = Table.TransformColumns(Source, {{\"country\", each Text.Upper(_), type nullable text}}),\r\n  #\"Removed duplicates\" = Table.Distinct(#\"Uppercased text\", {\"depname\"}),\r\n  #\"Inserted conditional column\" = Table.AddColumn(#\"Removed duplicates\", \"CountryCode\", each if [country] = \"INDIA\" then \"I\" else if [country] = \"DUBAI\" then \"D\" else \"NA\") in #\"Inserted conditional column\";\r\n",
					"documentLocale": "en-us"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EmpSource')]"
			]
		}
	]
}